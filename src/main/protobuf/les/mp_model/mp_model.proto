// Copyright (c) 2012-2013 Oleksandr Sviridenko
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package les.mp_model;

message MPTerm {
  required string name = 1;
  required double coefficient = 2;
}

message MPVariable {
  required string name = 1;
  required double lower_bound = 2 [default = 0.0];
  required double upper_bound = 3 [default = 1.0];
}

message MPVariableValue {
  required string name = 1;
  required double value = 2;
}

message MPConstraint {
  required string name = 1;
  required double lower_bound = 2;
  required double upper_bound = 3;
  repeated MPTerm terms = 4;
}

message MPObjective {
  required bool maximization = 1 [default = true];
  repeated MPTerm terms = 2;
}

message MPModel {
  required string name = 1;
  required MPObjective objective = 2;
  required MPConstraint constraints = 3;
}

message MPSolution {
  enum Status {
    OPTIMAL = 0;
    FEASIBLE = 1;
    INFEASIBLE = 2;
    NOT_SOLVED = 3;
  }
  required Status status = 1;
  optional double objective_value = 2;
  repeated MPVariableValue variable_values = 3;
}

message OptimizationParameters {
  enum BackendSolver {
    CLP = 0;  // https://projects.coin-or.org/Clp/
    DUMMY_SOLVER = 1;
    FRAKTIONAL_KNAPSACK_SOLVER = 2;
    GLPK = 3;  // http://www.gnu.org/software/glpk/
    LP_SOLVE = 4;  // http://lpsolve.sourceforge.net/
    SCIP = 5;  // http://scip.zib.de/
    SYMPHONY = 6;  // https://projects.coin-or.org/SYMPHONY/
  };
  // NOTE: this enumeration has to be synced with les.solver.executors package.
  enum Executor {
    DUMMY_EXECUTOR = 0;
    THREAD_EXECUTOR = 1;
  };
  enum Decomposer {
    QUASIBLOCK_FINKELSTEIN_DECOMPOSER = 1;
    MAX_CLIQUE_DECOMPOSER = 2;
  };
  enum SolutionTable {
    SQLITE_SOLUTION_TABLE = 1;
  };
  // A backend solver that will be used to solve relaxed problem or entire
  // problem in the worst case.
  optional BackendSolver default_backend_solver = 1;
  // A list of relaxations that will be applied one by one.
  repeated BackendSolver relaxation_backend_solvers = 2;
  // Max number of shared variables betweet two subproblems. In the worst case
  // les will have to solve 2**max_num_shared_variables problems.
  optional int64 max_num_shared_variables = 3 [default = 10];
  optional Executor executor = 4 [default = DUMMY_EXECUTOR];
  optional Decomposer decomposer = 5 [default = QUASIBLOCK_FINKELSTEIN_DECOMPOSER];
  optional SolutionTable solution_table = 6 [default = SQLITE_SOLUTION_TABLE];
}
